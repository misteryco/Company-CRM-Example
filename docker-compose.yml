services:
  crm-app:
    build: .
    restart: always
    ports:
      - 8001:8000
      #    volumes:
      #      - .:/app
    volumes:
#      - type: volume
#        source: the_app
#        target: /data
#        volume:
#          nocopy: true
      - type: bind
        source: .
        target: /app
    environment:
      CELERY_BROKER_URL_: pyamqp://guest@rabbitmq//
      CELERY_RESULT_BACKEND_: db+postgresql://postgres:postgres@postgres/crm_tables
      DB_HOST: postgres
  postgres:
    image: postgres
    restart: always
    ports:
      - "5433:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - ./postgresql:/var/lib/postgresql/data
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq

#volumes:
#  # Just specify a path and let the Engine create a volume
#  - /var/lib/mysql
#
#  # Specify an absolute path mapping
#  - /opt/data:/var/lib/mysql
#
#  # Path on the host, relative to the Compose file
#  - ./cache:/tmp/cache
#
#  # User-relative path
#  - ~/configs:/etc/configs/:ro
#
#  # Named volume
#  - datavolume:/var/lib/mysql
#version: "3.2"
#services:
#  web:
#    image: nginx:alpine
#    ports:
#      - "80:80"
#    volumes:
#      - type: volume
#        source: mydata
#        target: /data
#        volume:
#          nocopy: true
#      - type: bind
#        source: ./static
#        target: /opt/app/static
#
#networks:
#  webnet:
#
#volumes:
#  mydata: